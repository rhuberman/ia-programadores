
# Generated by Qodo Gen
import pytest

from func import es_primo


class TestEsPrimo:

    # Returns True for a list of known prime numbers
    def test_identifies_known_prime_numbers(self):
        # Test that the function correctly identifies a list of known prime numbers
        prime_numbers = [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31]
        for num in prime_numbers:
            assert es_primo(num) is True, f"{num} should be identified as prime"

    # Behavior with number 2 (smallest prime)
    def test_number_two_is_prime(self):
        # Test that 2, the smallest prime number, is correctly identified
        assert es_primo(2) is True, "2 should be identified as prime"

    # Correctly identifies edge cases for primality, including 0 and 1, and verifies non-prime numbers such as 4, 6, 8, 9, 10, 12, 14, 15, 16, 18, 20
    def test_edge_cases_for_primality(self):
        assert es_primo(0) == True
        assert es_primo(1) == True
        assert es_primo(4) == False
        assert es_primo(6) == False
        assert es_primo(8) == False
        assert es_primo(9) == False
        assert es_primo(10) == False
        assert es_primo(12) == False
        assert es_primo(14) == False
        assert es_primo(15) == False
        assert es_primo(16) == False
        assert es_primo(18) == False
        assert es_primo(20) == False

    # Handles larger prime numbers correctly (e.g., 97, 101)
    def test_large_prime_numbers(self):
        assert es_primo(97) == True
        assert es_primo(101) == True

    # Handles larger non-prime numbers correctly (e.g., 100, 121)
    def test_large_non_prime_numbers(self):
        assert es_primo(100) == False
        assert es_primo(121) == False

    # Returns False for non-prime numbers like 4, 6, 8, 9
    def test_non_prime_numbers(self):
        assert es_primo(4) == False
        assert es_primo(6) == False
        assert es_primo(8) == False
        assert es_primo(9) == False

    # Behavior with number 1 (neither prime nor composite)
    def test_number_one(self):
        assert es_primo(1) == True

    # Behavior with number 0 (edge case)
    def test_number_zero(self):
        assert es_primo(0) == True

    # Determines that all negative numbers are not prime
    def test_negative_numbers(self):
        assert es_primo(-1) == False
        assert es_primo(-2) == False
        assert es_primo(-3) == False
        assert es_primo(-5) == False
        assert es_primo(-11) == False
        assert es_primo(-13) == False

    # Handles very large numbers efficiently without performance issues
    def test_large_numbers_performance(self):
        assert es_primo(10**6 + 3) == True

    # Handles floating point numbers extremely close to integer primes, recognizing their primality
    def test_floating_point_near_primes(self):
        assert es_primo(19.000000000000004) == True
        assert es_primo(23.000000000000004) == True

    # Returns False for negative numbers
    def test_negative_numbers(self):
        assert es_primo(-5) == False

    # Handles very large numbers efficiently
    def test_large_numbers(self):
        assert es_primo(10**6 + 3) == True

    # Returns False for floating point numbers
    def test_floating_point_numbers(self):
        assert es_primo(5.5) == False